<section itemscope itemtype="http://schema.org/Product" class="section__principal" data-section-id="{{ section.id }}" data-section-type="product">

{%- assign unico = product.has_only_default_variant -%}
{%- assign inventario_actual = variant.inventory_quantity -%}
{%- assign current_variant = product.selected_or_first_available_variant -%}
{%- assign featured_image = current_variant.featured_image | default: product.featured_image -%}

  <meta itemprop="name" content="{{ product.title }}{% unless product.has_only_default_variant %} - {{ current_variant.title }}{% endunless %}">
  <meta itemprop="url" content="{{ shop.url }}{{ product.url }}">
  <meta itemprop="image" content="{{ product.featured_image.src | img_url: '1024x1024' }}">
  <div class="container">
    <div class="row">
      <div class="col-md-6 col-lg-7">
        <div class="row">
          <div class="col-12 breadcrumb">
            {% include 'breadcrumbs' %}
          </div>
          <div class="col-12 product__slider">
            <div class="row row-mobile">
              <div class="swiper-container gallery-thumbs col-md-12 col-lg-2 order-2 order-lg-1">
                <div class="swiper-wrapper ">
                {% for image in product.images %}
                  <div class="swiper-slide img-container" style="background-image:url({{ image.src | product_img_url: '100x', scale: 3 }}); background-size: cover;"></div>
                {% endfor %}
                </div>
              </div>
              <div class="swiper-container gallery-top col-md-12 col-lg-10 order-1 order-lg-2">
                <div class="swiper-wrapper">
                {% for image in product.images %}
                  <div class="swiper-slide img-container" style="background-image:url({{ image.src | product_img_url: '793x' }}); background-size: cover;">{%- comment -%}<button class="btn__wishlist product_{{product.id}}" data-swaction="addToWishlist" data-product-id="{{product.id | json}}"></button>{%- endcomment -%}</div>
                {% endfor %}
                {% include 'grid-item-icons' %}
                </div>
              </div>
            </div>
            
          </div>
        </div>
      </div>

      {% include 'tag-logic' %}

      {% comment %} <div class="col-md-6 col-lg-5 section__container
        {% if soon %} product soon 
        {% elsif new %} product new 
        {% elsif momi %} product momi 
        {% elsif clean %} product clean
        {% else %} product 
        {% endif %}
        "> {% endcomment %}
      <div class="col-md-6 col-lg-5 section__container
        {% if soon %} product soon
        {% elsif new %} product new
        {% else %} product
        {% endif %}
        ">
        <h1 class="text-link">by {{ product.vendor }}</h1>
        <h2>{{ product.title }}</h2>
        <p><a class="link--orange"><span class="shopify-product-reviews-badge" data-id="{{ product.id }}"></span></a></p>
        <div class="product__detail--name" data-price-wrapper>
          <h3>{{ product.metafields['producto']['presentacion'] }}</h3>


        {% if unico %}  
          <p class="h3 unico" data-product-price>
            {% if product.compare_at_price_max > product.price and product.compare_at_price_max != 0 %}
              <del>{{ product.compare_at_price_max | money }}</del><br />
              <span>{{ product.price | money }}</span>
            {% else product.compare_at_price_max == blank %}
              {{ product.price | money }}
            {% endif %}
          </p>
        {% else current_variant %}
          {% comment %} <p class="h3 variantes" data-product-price>
            {% if current_variant.price < current_variant.compare_at_price %}
              <del>{{ current_variant.compare_at_price | money }}</del> {{ current_variant.price | money }}
            {% else current_variant.compare_at_price == blank %}
              {{ current_variant.price | money }}
            {% endif %}
          </p> {% endcomment %}
          <p class="h3 variantes">
            {%- comment -%}Se quito de aqui el control de precios cuando es variante, pues el dropdown ya lo tiene.{%- endcomment -%}
          </p>
        {% endif %}       

        </div>

        <div itemprop="offers" itemscope itemtype="http://schema.org/Offer">
          {% assign variant = product.selected_or_first_available_variant %}
          <meta itemprop="priceCurrency" content="{{ cart.currency.iso_code }}">
          <link itemprop="availability" href="http://schema.org/{% if product.available %}InStock{% else %}OutOfStock{% endif %}">
          {% form 'product', product, class:productform_class %}
          {% if product.has_only_default_variant %}
            <input name="id" value="{{ variant.id }}" type="hidden">
          {% else %}
            <select name="id" id="ProductSelect-{{ section.id }}" class="product-single__variants">
              {% for variant in product.variants %}
                {% if variant.available %}
                  <option {% if variant == product.selected_or_first_available_variant %} selected="selected" {% endif %} data-sku="{{ variant.sku }}" value="{{ variant.id }}">{{ variant.title }} - {{ variant.price | money_with_currency }}</option>
                {% else %}
                  <option disabled="disabled">
                    {{ variant.title }} - {{ 'products.product.sold_out' | t }}
                  </option>
                {% endif %}
              {% endfor %}
            </select>
            {% endif %}
            {%- comment -%}  
              MUESTRA EL INPUT PARA AGREGAR UNO O MÁS PRODUCTOS AL CARRITO
            {%- endcomment -%}
            {% comment %} <div class="product-single__quantity{% unless section.settings.product_quantity_enable %} is-hidden{% endunless %}">
              <label for="Quantity">{{ 'products.product.quantity' | t }}</label>
              <input type="number" id="Quantity" name="quantity" value="1" min="1" class="quantity-selector">
            </div> {% endcomment %}
            <button type="submit" name="add" id="AddToCart" class="btn {{ btn_class }}{% if section.settings.enable_payment_button %} btn--secondary{% endif %}">
              <span id="AddToCartText">{{ 'products.product.add_to_cart' | t }}</span>
            </button>
            {% if section.settings.enable_payment_button %}
              {{ form | payment_button }}
            {% endif %}
          {% endform %}
        </div>

        <div class="clearfix"></div>
        
        {%- comment -%}
        El botón de Back to Stock se configura directo de la app, en THEME INTEGRATION: Custom Script.
        {%- endcomment -%}
        {%- comment -%}<button class="btn__main btn__main--big" id="BIS_trigger" {% if product.available %} style="display: none;" {% endif %}>Notificarme cuando esté disponible</button>{%- endcomment -%}

	      <div class="mt-30 mb-30">
          <b>Descripción.</b>
          <p>{{ product.description }}</p>
        </div>
        <div class="recomendado mb-30 mt-30">
        {% if product.metafields.recomendado.nombre_1 != blank %}
          <b>Recomendado por</b>
          <div class="tag"><a href="{{ product.metafields['recomendado']['link_1'] }}" target="_blank">{{ product.metafields['recomendado']['nombre_1'] }}</a></div>
          {% if product.metafields.recomendado.nombre_2 != blank %}   
          <div class="tag"><a href="{{ product.metafields['recomendado']['link_2'] }}" target="_blank">{{ product.metafields['recomendado']['nombre_2'] }}</a></div>
          {% endif %}
          {% if product.metafields.recomendado.nombre_3 != blank %}   
          <div class="tag"><a href="{{ product.metafields['recomendado']['link_3'] }}" target="_blank">{{ product.metafields['recomendado']['nombre_3'] }}</a></div>
          {% endif %}
          {% if product.metafields.recomendado.nombre_4 != blank %}   
          <div class="tag"><a href="{{ product.metafields['recomendado']['link_4'] }}" target="_blank">{{ product.metafields['recomendado']['nombre_4'] }}</a></div>
          {% endif %}
        {% endif %}
        </div>

      </div>
    </div>
  </div>

</section>
 
{% comment %} <script type="text/javascript">
 
  $(function(){
    $('#opciones li').on('click', function() {

      var id = $(this).text();

      var sortBySelect = document.querySelector("#Option1");
      sortBySelect.value = id;
      sortBySelect.dispatchEvent(new Event("change"));
    })
  })

  $(document).ready(function(){
      $("#opciones li:first-child").addClass("active");

      $('#opciones li').click(function(){
        $('.opciones-item').removeClass('active');
        $(this).addClass('active');
        $('#opciones').toggleClass('active');
      });
  });
</script> {% endcomment %}

<script>
/*================ SECTIONS ================*/
theme.Product = (function() {
  function Product(container) {
    this.$container = $(container);
    this.sectionId = this.$container.attr('data-section-id');
    this.selectors = {
      $html: $('html'),
      $productImageGallery: $('.gallery__item', this.$container),
      $productImages: $('.product-single__image-wrapper', this.$container),
      $thumbImages: $('#ProductThumbs', this.$container).find(
        'a.product-single__thumbnail'
      ),
      $addToCart: $('#AddToCart', this.$container),
      $productPrice: $('#ProductPrice', this.$container),
      $comparePrice: $('#ComparePrice', this.$container),
      $comparePriceA11y: $('#ComparePriceA11y', this.$container),
      $priceA11y: $('#PriceA11y', this.$container),
      $quantityElements: $('.product-single__quantity', this.$container),
      $addToCartText: $('#AddToCartText', this.$container),
      $tabTrigger: $('.tab-switch__trigger', this.$container),
      $tabContent: $('.tab-switch__content', this.$container),
      $productFullDetails: $('.product-single__full-details', this.$container),
      $SKU: $('.variant-sku', this.$container),
      $shopifyPaymentButton: $('.shopify-payment-button', this.$container),
      $unitPrice: $('[data-unit-price]', this.$container),
      $unitPriceBaseUnit: $('[data-unit-price-base-unit]', this.$container),
      $unitPriceContainer: $('[data-unit-price-container]', this.$container)
    };
    this.classes = {
      hide: 'hide'
    };
    if (!$('#ProductJson-' + this.sectionId).html()) {
      return;
    }
    this.zoomType = this.$container.data('image-zoom-type');
    this.showExtraTab = this.$container.data('show-extra-tab') || false;
    this.extraTabContent = this.$container.data('extra-tab-content') || '';
    this.enableHistoryState =
      this.$container.data('enable-history-state') || false;
    this.productSingleObject = JSON.parse(
      document.getElementById('ProductJson-' + this.sectionId).innerHTML
    );
    this.init();
  }
  Product.prototype = _.assignIn({}, Product.prototype, {
    init: function() {
      this.initBreakpoints();
      this.initProductVariant();
      this.productImageSwitch();
      timber.autoResponsiveElements();
      if (this.zoomType === 'lightbox') {
        this.productImageGallery();
      } else if (this.zoomType === 'zoom-in') {
        this.productImageZoom();
      }
      if (!this.showExtraTab || this.extraTabContent) {
        this.initProductTabs();
      }
    },
    initBreakpoints: function() {
      var self = this;
      enquire.register(theme.variables.mediaQueryMedium, {
        match: function() {
          if (self.zoomType === 'zoom-in') {
            if (self.selectors.$productImages.length) {
              // remove event handlers for product zoom on mobile
              self.selectors.$productImages.trigger('zoom.destroy');
              self.selectors.$productImages.off();
              self.selectors.$productImages.removeClass('image-zoom');
            }
          } else if (self.zoomType === 'lightbox') {
            // remove event handlers for lightbox on mobile
            self.selectors.$productImageGallery.off();
            self.selectors.$productImages.each(function() {
              $(this).removeClass('zoom-lightbox');
            });
          }
          theme.variables.bpSmall = true;
        },
        unmatch: function() {
          theme.variables.bpSmall = false;
          if (self.zoomType === 'zoom-in') {
            // reinit product zoom
            self.productImageZoom();
          } else if (self.zoomType === 'lightbox') {
            // reinit lightbox
            self.selectors.$productImages.each(function() {
              $(this).addClass('zoom-lightbox');
            });
            self.productImageGallery();
          }
        }
      });
    },
    productImageSwitch: function() {
      if (!this.selectors.$thumbImages.length) {
        return;
      }
      var self = this;
      // Switch the main image with one of the thumbnails
      // Note: this does not change the variant selected, just the image
      this.selectors.$thumbImages.on('click', function(evt) {
        evt.preventDefault();
        var newImageId = $(this).attr('data-image-id');
        self.switchImage(newImageId);
      });
    },
    initProductTabs: function() {
      if (!this.selectors.$tabTrigger.length) {
        return;
      }
      var $trigger = this.selectors.$tabTrigger,
        $content = this.selectors.$tabContent,
        $el,
        link;
      // Hide extra content areas with JS and set active tab
      $content.filter(':gt(0)').addClass('is-hidden');
      $trigger.first().addClass('is-active');
      $trigger.on('click', function(evt) {
        evt.preventDefault();
        // set active tab
        $trigger.removeClass('is-active');
        $el = $(this).addClass('is-active');
        // hide all content areas, then show desired one
        link = $el.data('link');
        $content.addClass('is-hidden');
        $content
          .filter('[data-content="' + link + '"]')
          .removeClass('is-hidden');
      });
    },
    initProductVariant: function() {
      var self = this;
      var product = this.productSingleObject;
      var selectCallback = function(variant, selector) {
        self.productPage({
          money_format: theme.moneyFormat,
          variant: variant,
          selector: selector,
          translations: {
            add_to_cart: theme.strings.addToCart,
            sold_out: theme.strings.soldOut,
            unavailable: theme.strings.unavailable
          }
        });
};
      this.optionSelector = new Shopify.OptionSelectors(
        'ProductSelect-' + this.sectionId,
        {
          product: product,
          onVariantSelected: selectCallback,
          enableHistoryState: this.enableHistoryState
        }
      );
      // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
      if (product.options.length === 1 && product.options[0] !== 'Title') {
        $('.selector-wrapper:eq(0)', this.$container).prepend(
          '<label for="productSelect-option-0">' +
            product.options[0] +
            '</label>'
        );
      }
      // Hide selectors if we only have 1 variant and its title contains 'Default'.
      if (
        product.variants.length === 1 &&
        product.variants[0].title.toLowerCase().indexOf('default') !== -1
      ) {
        $('.selector-wrapper', this.$container).hide();
      }
    },
    productPage: function(options) {
      var self = this;
      var moneyFormat = options.money_format;
      var variant = options.variant;
      var translations = options.translations;
      if (variant) {
        // Update variant image, if one is set
        if (variant.featured_image) {
          var newImg = variant.featured_image;
          self.switchImage(newImg.id);
        }
        // Select a valid variant if available
        if (variant.available) {
          // Available, enable the submit button, change text, show quantity elements
          this.selectors.$addToCart
            .removeClass('disabled')
            .prop('disabled', false);
          this.selectors.$addToCartText.html(translations.add_to_cart);
          this.selectors.$quantityElements.show();
          this.selectors.$shopifyPaymentButton.show();
          var $link = $(this.selectors.$productFullDetails, this.$container);
          if ($link.length) {
            $link.attr(
              'href',
              this.updateUrlParameter($link.attr('href'), 'variant', variant.id)
            );
          }
        } else {
          // Sold out, disable the submit button, change text, hide quantity elements
          this.selectors.$addToCart.addClass('disabled').prop('disabled', true);
          this.selectors.$addToCartText.html(translations.sold_out);
          this.selectors.$quantityElements.hide();
          this.selectors.$shopifyPaymentButton.hide();
        }
        // Regardless of stock, update the product price
        this.selectors.$productPrice.html(
          Shopify.formatMoney(variant.price, moneyFormat)
        );
        // Show SKU
        this.selectors.$SKU.html(variant.sku);
        // Also update and show the product's compare price if necessary
        if (variant.compare_at_price > variant.price) {
          this.selectors.$comparePrice
            .html(Shopify.formatMoney(variant.compare_at_price, moneyFormat))
            .removeClass(this.classes.hide);
          this.selectors.$comparePriceA11y.attr('aria-hidden', 'false');
          this.selectors.$priceA11y.attr('aria-hidden', 'false');
        } else {
          this.selectors.$comparePrice.addClass(this.classes.hide).html('');
          this.selectors.$comparePriceA11y.attr('aria-hidden', 'true');
        }
        // Unit price
        this.selectors.$unitPriceContainer.addClass(this.classes.hide);
        if (variant.unit_price) {
          this.selectors.$unitPrice.html(
            Shopify.formatMoney(variant.unit_price, theme.moneyFormat)
          );
          this.selectors.$unitPriceBaseUnit.html(this.getBaseUnit(variant));
          this.selectors.$unitPriceContainer.removeClass(this.classes.hide);
        }
      } else {
        // The variant doesn't exist, disable submit button.
        // This may be an error or notice that a specific variant is not available.
        // To only show available variants, implement linked product options:
        //   - http://docs.shopify.com/manual/configuration/store-customization/advanced-navigation/linked-product-options
        this.selectors.$addToCart.addClass('disabled').prop('disabled', true);
        this.selectors.$addToCartText.html(translations.unavailable);
        this.selectors.$quantityElements.hide();
        this.selectors.$shopifyPaymentButton.hide();
      }
    },
    updateUrlParameter: function(url, key, value) {
      var re = new RegExp('([?&])' + key + '=.*?(&|$)', 'i');
      var separator = url.indexOf('?') === -1 ? '?' : '&';
      if (url.match(re)) {
        return url.replace(re, '$1' + key + '=' + value + '$2');
      } else {
        return url + separator + key + '=' + value;
      }
    },
    getBaseUnit: function(variant) {
      return variant.unit_price_measurement.reference_value === 1
        ? variant.unit_price_measurement.reference_unit
        : variant.unit_price_measurement.reference_value +
            variant.unit_price_measurement.reference_unit;
    }
  });
  return Product;
})();
</script>